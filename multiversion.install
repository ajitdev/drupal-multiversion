<?php

use Drupal\multiversion\Entity\Workspace;
use Drupal\Core\Database\Database;
use Drupal\Core\Utility\UpdateException;
use \Drupal\Core\Database\Driver\mysql\Connection;

/**
 * Implements hook_install().
 */
function multiversion_install() {
  // Create default workspace.
  Workspace::create(['machine_name' => 'live', 'label' => 'Live', 'type' => 'basic'])->save();
  /** @var \Drupal\multiversion\MultiversionManagerInterface $manager */
  $manager = \Drupal::getContainer()->get('multiversion.manager');
  $manager->enableEntityTypes();
}

/**
 * Implements hook_uninstall().
 */
function multiversion_uninstall() {
  \Drupal::state()->delete('multiversion_enabled');
}

/**
 * Add workspace field to data_field and revision_field tables and migrate data.
 */
function multiversion_update_8001() {
  $connection = Database::getConnection();
  if ($connection instanceof Connection) {
    $schema = $connection->schema();
    $entity_manager = \Drupal::service('entity.manager');
    $manager = \Drupal::service('multiversion.manager');

    // Find all supported entities.
    $entities = $manager->getSupportedEntityTypes();

    // Field can't be NOT NULL on an table with existing data.
    $field = array(
      'type' => 'int',
      'unsigned' => TRUE,
    );

    // Loop through each one.
    foreach ($entities as $entity_type => $entity) {
      $entity_keys = $entity->getKeys();

      // Get the field names used as keys.
      $field_id = $entity_keys['id'];
      $field_revision = $entity_keys['revision'];

      // Get the tables name used for base table and revision table.
      $table_base = ($entity->isTranslatable()) ? $entity->getDataTable() : $entity->getBaseTable();
      $table_revision = ($entity->isTranslatable()) ? $entity->getRevisionDataTable() : $entity->getRevisionTable();

      // Block content definition doesn't include the revision field table.
      // So get it.
      $tables = $entity_manager->getStorage($entity_type)
        ->getTableMapping()
        ->getTableNames();

      if (!$table_revision && in_array($entity_type . '_field_revision', $tables)) {
        $table_revision = $entity_type . '_field_revision';
      }

      $results = array();
      // Pull data from the old table.
      $old_data_table = $entity_type . '__workspace';

      if ($schema->tableExists($old_data_table)){
        $results = $connection->select($old_data_table)
          ->fields($old_data_table, array('entity_id', 'workspace_target_id'))
          ->execute()->fetchAll();
      }

      if ($schema->tableExists($table_base)) {
        if (!$schema->fieldExists($table_base, 'workspace')) {
          // Add new field to the base table.
          $schema->addField($table_base, 'workspace', $field);
        }

        foreach ($results as $result) {
          // Add the value to the new column.
          $connection->update($table_base)
            ->fields(array('workspace' => $result->workspace_target_id))
            ->condition($field_id, $result->entity_id, '=')
            ->execute();
        }
      }

      if ($schema->tableExists($old_data_table)) {
        // Drop old table.
        $schema->dropTable($old_data_table);
      }

      $results = array();
      // Pull data from old table.
      $old_revision_table = $entity_type . '_revision__workspace';

      if ($schema->tableExists($old_revision_table)) {
        $results = $connection->select($old_revision_table)
          ->fields($old_revision_table, array(
            'entity_id,',
            'revision_id',
            'workspace_target_id'
          ))
          ->execute();
      }

      if ($schema->tableExists($table_revision)) {
        if (!$schema->fieldExists($table_revision, 'workspace')) {
          // Add new field to the field revision table.
          $schema->addField($table_revision, 'workspace', $field);
        }

        foreach ($results as $result) {
          // Add data to the revision table.
          $connection->update($table_revision)
            ->fields(array('workspace' => $result->workspace_target_id))
            ->condition($field_id, $result->entity_id, '=')
            ->condition($field_revision, $result->revision_id)
            ->execute();
        }
      }

      if ($schema->tableExists($old_revision_table)) {
        // Drop old table.
        $schema->dropTable($old_revision_table);
      }
    }
  }
}

/**
 * Enable content_storage_migrate module.
 */
function multiversion_update_8002() {
  if (!Drupal::moduleHandler()->moduleExists('entity_storage_migrate')) {
    $modules = array('entity_storage_migrate');
    // Enable the module.
    $enabled = \Drupal::service('module_installer')->install($modules);
    // If not, throw an exception.
    if (!$enabled) {
      throw new UpdateException('Could not enable entity_storage_migrate module.');
    }
  }
}

/**
 * Update user entity type to non-revisionable.
 */
function multiversion_update_8004() {
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $changes = $update_manager->getChangeSummary();
  // Check if user entity type has new changes.
  if (isset($changes['user'])) {
    /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $storage = $entity_type_manager->getStorage('user');

    /** @var \Drupal\Core\Entity\Sql\TableMappingInterface $table_mapping */
    $table_mapping = $storage->getTableMapping();
    $table_names = $table_mapping->getTableNames();
    $data = [];
    $database = \Drupal::database();
    // Create the $data array keyed by table name.
    foreach ($table_names as $table_name) {
      $column_names = $table_mapping->getAllColumns($table_name);
      $results = $database->select($table_name, 't')->fields('t')->execute()->fetchAll();
      foreach ($results as $key => $result) {
        foreach ($column_names as $column_name) {
          if (isset($result->{$column_name})) {
            $data[$table_name][$key][$column_name] = $result->{$column_name};
          }
        }
      }
    }

    // Empty all tables.
    foreach ($table_names as $table_name) {
      $database->truncate($table_name)->execute();
    }

    // Delete revision tables that after applying updates doesn't get deleted.
    $tables_to_delete = ['user_revision__roles', 'user_revision__user_picture'];
    foreach ($tables_to_delete as $table_name) {
      if ($database->schema()->tableExists($table_name)) {
        $database->schema()->dropTable($table_name);
      }
    }

    // Apply updates twice.
    $update_manager->applyUpdates();
    $update_manager->applyUpdates();

    // Load tables info from the updated entity storage.
    $entity_type_manager->clearCachedDefinitions();
    $storage = $entity_type_manager->getStorage('user');
    /** @var \Drupal\Core\Entity\Sql\TableMappingInterface $new_table_mapping */
    $new_table_mapping = $storage->getTableMapping();
    $new_table_names = $new_table_mapping->getTableNames();

    try {
      foreach ($data as $table_name => $table_data) {
        if (!in_array($table_name, $new_table_names)) {
          continue;
        }
        $column_names = $new_table_mapping->getAllColumns($table_name);
        foreach ($table_data as $record) {
          $values = [];
          foreach ($column_names as $column_name) {
            if (isset($record[$column_name])) {
              $values[$column_name] = $record[$column_name];
            }
          }

          // Prepare the query.
          $query = $database->select($table_name);
          $fields = array_keys($values);
          $query->fields($table_name, $fields);
          foreach ($fields as $field) {
            $query->condition($field, $values[$field]);
          }
          $exists = $query->execute()->fetchAll();
          // Insert a new field or update an existing field in the database.
          if (isset($exists) && isset($exists[0])) {
            $query = $database->update($table_name)->fields($values);
            foreach ($fields as $field) {
              $query->condition($field, $values[$field]);
            }
            $query->execute();
          }
          else {
            $database
              ->insert($table_name)
              ->fields($values)
              ->execute();
          }
        }
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('multiversion')->error($e->getMessage());
    }
  }
}
