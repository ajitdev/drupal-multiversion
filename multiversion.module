<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\multiversion\Entity\WorkspaceInterface;
use Drupal\multiversion\Entity\SqlContentEntityStorage;

/**
 * Implements hook_entity_type_alter().
 */
function multiversion_entity_type_alter(array &$entity_types) {
  // @todo: Loop over all entity types and load the plugin info to look at the
  // 'bundle_of' property to only alter content entity types.
  foreach (array('node', 'entity_test_rev', 'entity_test_mulrev') as $entity_type) {
    if (isset($entity_types[$entity_type])) {
      $entity_types[$entity_type]->setStorageClass('Drupal\multiversion\Entity\SqlContentEntityStorage');
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function multiversion_entity_base_field_info(EntityTypeInterface $entity_type) {
  if (in_array($entity_type->id(), array('node', 'entity_test_rev', 'entity_test_mulrev'))) {
    $fields = array();
    $fields['_deleted'] = BaseFieldDefinition::create('boolean')
      ->setLabel('Deleted flag')
      ->setDescription('Indicates if the entity is flagged as deleted or not.')
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDefaultValue(FALSE)
      ->setCardinality(1);

    $fields['_local'] = BaseFieldDefinition::create('boolean')
      ->setLabel('Local flag')
      ->setDescription('Indicates if this entity is local and not intended to be moved to other environments.')
      ->setRevisionable(FALSE)
      ->setTranslatable(FALSE)
      ->setDefaultValue(FALSE)
      ->setCardinality(1);

    $fields['_local_seq'] = BaseFieldDefinition::create('local_sequence')
      ->setLabel('Local sequence ID')
      ->setDescription('The local sequence ID of the entity.')
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setCardinality(1);

    $fields['_revs_info'] = BaseFieldDefinition::create('revision_info')
      ->setLabel('Revision info')
      ->setDescription('The revision history information for the entity.')
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);

    return $fields;
  }
}

/**
 * Implements hook_cron().
 */
function multiversion_cron() {
  if (\Drupal::config('multiversion.settings')->get('compaction_on_cron')) {
    \Drupal::service('entity.compaction.manager')->compact();
  }
}

/**
 * Implements hook_entity_insert().
 */
function multiversion_entity_insert(EntityInterface $entity) {
  if ($entity->uuid()) {
    \Drupal::service('entity.uuid_index')->add($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function multiversion_entity_delete(EntityInterface $entity) {
  if ($entity->uuid()) {
    \Drupal::service('entity.uuid_index')->delete($entity->uuid());
  }
}

/**
 * Load a deleted entity.
 *
 * @param string $entity_type
 * @param integer $id
 * @param boolean $reset
 */
function entity_load_deleted($entity_type, $id, $reset = FALSE) {
  $controller = \Drupal::entityManager()->getStorage($entity_type);
  if ($reset) {
    $controller->resetCache(array($id));
  }
  return $controller->loadDeleted($id);
}

/**
 * Load multiple deleted entities.
 *
 * @param string $entity_type
 * @param array $ids
 * @param boolean $reset
 */
function entity_load_multiple_deleted($entity_type, $ids, $reset = FALSE) {
  $controller = \Drupal::entityManager()->getStorage($entity_type);
  if ($reset) {
    $controller->resetCache($ids);
  }
  return $controller->loadMultipleDeleted($ids);
}

/**
 * URI callback for the workspace entity type.
 */
function multiversion_workspace_uri(WorkspaceInterface $entity) {
  return $entity->id();
}
