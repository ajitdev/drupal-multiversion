<?php

use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\multiversion\Entity\WorkspaceInterface;
use Drupal\multiversion\Entity\SqlContentEntityStorage;

/**
 * Implements hook_entity_type_alter().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function multiversion_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\multiversion\MultiversionManagerInterface $manager */
  $manager = \Drupal::service('multiversion.manager');

  foreach ($entity_types as $entity_type) {
    if ($manager->isSupportedEntityType($entity_type)) {
      // Make all content entity types revisionable.
      if (!$entity_type->isRevisionable()) {
        // We only need to set the revision key to make an entity type
        // revisionable. The table names will be handled by the storage class.
        // @see \Drupal\Core\Entity\Sql\SqlContentEntityStorage::initTableLayout
        $keys = $entity_type->getKeys();
        $keys['revision'] = 'revision_id';
        $entity_type->set('entity_keys', $keys);
      }
      $entity_type->setStorageClass('Drupal\multiversion\Entity\SqlContentEntityStorage');
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 * @return \Drupal\Core\Field\BaseFieldDefinition[]
 */
function multiversion_entity_base_field_info(EntityTypeInterface $entity_type) {
  /** @var \Drupal\multiversion\MultiversionManagerInterface $manager */
  $manager = \Drupal::service('multiversion.manager');

  if ($manager->isSupportedEntityType($entity_type)) {
    $fields = array();
    $fields['_deleted'] = BaseFieldDefinition::create('boolean')
      ->setLabel('Deleted flag')
      ->setDescription('Indicates if the entity is flagged as deleted or not.')
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDefaultValue(FALSE)
      ->setCardinality(1);

    $fields['_local'] = BaseFieldDefinition::create('boolean')
      ->setLabel('Local flag')
      ->setDescription('Indicates if this entity is local and not intended to be moved to other environments.')
      ->setRevisionable(FALSE)
      ->setTranslatable(FALSE)
      ->setDefaultValue(FALSE)
      ->setCardinality(1);

    $fields['_local_seq'] = BaseFieldDefinition::create('local_sequence')
      ->setLabel('Local sequence ID')
      ->setDescription('The local sequence ID of the entity.')
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setCardinality(1)
      ->setReadOnly(TRUE);

    $fields['_revs_info'] = BaseFieldDefinition::create('revision_info')
      ->setLabel('Revision info')
      ->setDescription('The revision history information for the entity.')
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setReadOnly(TRUE);

    // This will essentially overwrite the revision field definition but also
    // ensure that entity types that we enabled revisions for get a revision
    // field definition of a type that we expect.
    $fields[$entity_type->getKey('revision')] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Revision ID'))
      ->setDescription(t('The local revision ID of the entity.'))
      ->setReadOnly(TRUE)
      ->setSetting('unsigned', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_cron().
 */
function multiversion_cron() {
  // @todo Need tests
  if (\Drupal::config('multiversion.settings')->get('compaction_on_cron')) {
    \Drupal::service('entity.compaction.manager')->compact();
  }
}

/**
 * Implements hook_entity_presave().
 */
function multiversion_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityType()->get('local')) {
    $entity->_local->value = TRUE;
  }
}

/**
 * Implements hook_entity_insert().
 */
function multiversion_entity_insert(EntityInterface $entity) {
  $manager = \Drupal::service('multiversion.manager');
  if ($entity->uuid() && $manager->isSupportedEntityType($entity->getEntityType())) {
    \Drupal::service('entity.uuid_index')->add($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function multiversion_entity_update(EntityInterface $entity) {
  multiversion_entity_insert($entity);
}

/**
 * Implements hook_entity_delete().
 */
function multiversion_entity_delete(EntityInterface $entity) {
  $manager = \Drupal::service('multiversion.manager');
  if ($entity->uuid() && $manager->isSupportedEntityType($entity->getEntityType())) {
    \Drupal::service('entity.uuid_index')->delete($entity->uuid());
  }
}

/**
 * Load a deleted entity.
 *
 * @param string $entity_type
 * @param integer $id
 * @param boolean $reset
 */
function entity_load_deleted($entity_type, $id, $reset = FALSE) {
  $controller = \Drupal::entityManager()->getStorage($entity_type);
  if ($reset) {
    $controller->resetCache(array($id));
  }
  return $controller->loadDeleted($id);
}

/**
 * Load multiple deleted entities.
 *
 * @param string $entity_type
 * @param array $ids
 * @param boolean $reset
 */
function entity_load_multiple_deleted($entity_type, $ids, $reset = FALSE) {
  $controller = \Drupal::entityManager()->getStorage($entity_type);
  if ($reset) {
    $controller->resetCache($ids);
  }
  return $controller->loadMultipleDeleted($ids);
}

/**
 * URI callback for the workspace entity type.
 */
function multiversion_workspace_uri(WorkspaceInterface $entity) {
  return $entity->id();
}
